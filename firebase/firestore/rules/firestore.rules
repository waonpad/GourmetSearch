rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    // request user is same as resource user
    function isUserAuthenticated(userId) {
      return request.auth.uid == userId;
    }
    // request user is same as resource author
		// function isMatchUserReference(ref, userId) {
		// return ref != null && ref == get(/databases/$(database)/documents/users/$(userId)).__name__ && ref.size() > 0;
		// }

    // type check /////////////////////////////////////////////////////////////////////////
    // email
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$');
    }
    // string
    function isValidString(string) {
      return string is string && string.size() > 0;
    }
    // number
    function isValidNumber(number) {
      return number is number && number.size() > 0;
    }
    // boolean
    function isValidBoolean(boolean) {
      return boolean is bool && boolean.size() > 0;
    }
    // timestamp
    function isValidTimestamp(timestampVal) {
      return timestampVal is timestamp;
    }
    function isValidCreatedAtAndUpdatedAt(data) {
      return
      isValidTimestamp(data.createdAt) &&
      isValidTimestamp(data.updatedAt);
    }
    // array
    function isValidArray(array) {
      return array is list;
    }
    // value in array
    function isValidInArray(array, value) {
      return array is list && array.size() > 0 && value in array;
    }
    // object
    function isValidObject(object) {
      return object is map && object.size() > 0;
    }
    // path
    function isValidPath(path) {
      return path is path;
    }
    /////////////////////////////////////////////////////////////////////////

    // validate user
    function isValidUser(data) {
      return
      isValidString(data.displayName) &&
      isValidEmail(data.email) &&
      isValidInArray(['ADMIN', 'USER'], data.role);
    }

    // validate bookmark
    function isShopBookmarkRequest(request) {
      return
      isAuthenticated() &&
      request.resource.data.keys() == ["bookmarkCount"] &&
      (resource == null ||
        (request.resource.data.bookmarkCount == resource.data.bookmarkCount + 1) ||
        (request.resource.data.bookmarkCount == resource.data.bookmarkCount - 1)
      );
    }

    // user
    match /users/{userId} {
    	allow read;
      allow create: if isValidUser(request.resource.data) && isAuthenticated();
      allow update: if isValidUser(request.resource.data) && isUserAuthenticated(userId);

      // bookmarkd shops
      match /bookmarkedShops/{bookmarkedShopId} {
        allow read;
        allow create: if isUserAuthenticated(userId) && isValidCreatedAtAndUpdatedAt(request.resource.data);
        allow update: if false;
        allow delete: if isUserAuthenticated(userId);
      }
    }

    // shop
    match /shops/{shopId} {
      allow read;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isShopBookmarkRequest(request);
      allow delete: if isAuthenticated();

      // bookmarkd users
      match /bookmarkedUsers/{bookmarkedUserId} {
        allow read;
        allow create: if request.auth.uid == bookmarkedUserId && isValidCreatedAtAndUpdatedAt(request.resource.data);
        allow update: if false;
        allow delete: if request.auth.uid == bookmarkedUserId;
      }
    }
  }
}